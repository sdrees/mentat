matrix:
  fast_finish: true
  allow_failures:
    - rust: nightly
  include:
    - language: rust
      # We use OSX so that we can get a reasonably up to date version of SQLCipher.
      # (The version in Travis's default Ubuntu Trusty is much too old).
      os: osx
      before_install:
        - brew install sqlcipher --with-fts
      rust: 1.25.0  # Must align with `build/version.rs`.
      script:
        - ./scripts/cargo_test.sh
      cache: cargo
    - language: rust
      # We use OSX so that we can get a reasonably up to date version of SQLCipher.
      # (The version in Travis's default Ubuntu Trusty is much too old).
      os: osx
      before_install:
        - brew install sqlcipher --with-fts
      rust: stable
      script:
        - ./scripts/cargo_test.sh
      cache: cargo
    - language: rust
      # We use OSX so that we can get a reasonably up to date version of SQLCipher.
      # (The version in Travis's default Ubuntu Trusty is much too old).
      os: osx
      before_install:
        - brew install sqlcipher --with-fts
      rust: beta
      script:
        - ./scripts/cargo_test.sh
      cache: cargo
    - language: rust
      # We use OSX so that we can get a reasonably up to date version of SQLCipher.
      # (The version in Travis's default Ubuntu Trusty is much too old).
      os: osx
      before_install:
        - brew install sqlcipher --with-fts
      rust: nightly
      script:
        - ./scripts/cargo_test.sh
      cache: cargo
    - language: android
      dist: trusty
      jdk: oraclejdk8
      android:
        components:
          - tools
          - platform-tools
          - build-tools-25.0.2
          - tools
          - add-on
          - extra
      before_install:
        # Install SDK license so Android Gradle plugin can install deps.
        - mkdir "$ANDROID_HOME/licenses" || true
        - echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > "$ANDROID_HOME/licenses/android-sdk-license"
      install:
        # Install the rest of tools (e.g., avdmanager).
        - sdkmanager tools > /dev/null
        - sdkmanager 'platforms;android-27' > /dev/null
        - sdkmanager 'ndk-bundle' > /dev/null
        # Install the system image.
        - echo no | sdkmanager "system-images;android-24;google_apis;armeabi-v7a"
        # Create and start emulator for the script. Meant to race the install task.
        - echo no | avdmanager create avd --force -n test -k "system-images;android-24;google_apis;armeabi-v7a"
        - $ANDROID_HOME/emulator/emulator -avd test -engine classic -no-window -camera-back none -camera-front none -selinux permissive -verbose -qemu -m 512 &
        # install rustup & cargo
        - curl https://sh.rustup.rs -sSf | sh -s -- --default-toolchain stable -y
        - source $HOME/.cargo/env
        - ls -la /usr/local/share/
        # make standalone NDK
        - ./scripts/create_standalone_ndk.sh && cp cargo-config.toml ./.cargo/config || travis_terminate 1
        - echo $ANDROID_NDK_HOME
        - rustup target add aarch64-linux-android armv7-linux-androideabi i686-linux-android
        - cargo build --target aarch64-linux-android --release
      before_script:
        # Start adbd, wait for device connected and show android serial to avoid heavy tasks in parallel
        - adb wait-for-device get-serialno
        - adb shell settings put global window_animation_scale 0 &
        - adb shell settings put global transition_animation_scale 0 &
        - adb shell settings put global animator_duration_scale 0 &
        - adb shell input keyevent 82 &

      script:
        - ./sdks/android/Mentat/gradlew check connectedCheck --stacktrace

      env:
        global:
          - ADB_INSTALL_TIMEOUT=8
          - ANDROID_SDK_VERSION=4333796

      notifications:
        email: false

      sudo: false

      cache:
        directories:
          - $HOME/.gradle
